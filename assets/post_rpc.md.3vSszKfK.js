import{_ as s,f as n,e as a,z as l,aO as p}from"./chunks/framework.Wsa5D0Hz.js";const F=JSON.parse('{"title":"从零开始写一个RPC框架","description":"","frontmatter":{"title":"从零开始写一个RPC框架","date":"2023-04-09T00:00:00.000Z","excerpt":"本文基于netty和springboot实现了一个基础的RPC框架服务，提供寻址、自动注入、远程调用等功能","tags":["RPC","Spring","Netty","Java"]},"headers":[],"relativePath":"post/rpc.md","filePath":"post/rpc.md","lastUpdated":1691422614000}'),o={name:"post/rpc.md"},e=l('<h1 id="从零开始写一个rpc框架" tabindex="-1">从零开始写一个RPC框架 <a class="header-anchor" href="#从零开始写一个rpc框架" aria-label="Permalink to &quot;从零开始写一个RPC框架&quot;">​</a></h1><blockquote><p>一直以来都对RPC框架的实现很感兴趣，因此占用了几个下班时间，写出了这篇文章，希望能让读者对RPC框架的原理有个深刻的认识</p><p><strong>说明</strong>：本文所有代码均可在<a href="https://github.com/YangQuan666/demo/tree/rpc" target="_blank" rel="noreferrer">我的github仓库</a>中找到</p></blockquote><p><img src="'+p+`" style="max-height:400px;" loading="lazy"></p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>想象一下，如果要自己实现一个远程调用的框架，我们需要哪些轮子呢， 首先对于Java开发人员来说<code>Spring框架</code>是不可避免的； 其次RPC框架涉及到服务的发现和治理，因此我们需要一个注册中心；同时RPC的通信方式我们也要考虑到； 最后网络通信的过程中也离不开字节的序列化工具 ，因此本次的技术栈选型如下：</p><table><thead><tr><th>类型</th><th>技术选型</th></tr></thead><tbody><tr><td>开发框架</td><td>Spring Boot 3</td></tr><tr><td>注册中心</td><td>Zookeeper</td></tr><tr><td>网络通信</td><td>Netty</td></tr><tr><td>序列化工具</td><td>Protostuff</td></tr></tbody></table><h2 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h2><p>一次完整的rpc的流程一般如下：</p><ol><li>服务提供方(provider)将自己的服务信息发布到注册中心，比如：服务名称、版本、ip、端口等信息</li><li>服务提供方(provider)提供facade包给服务消费方(consumer)，facade包中已经包含请求需要的对象信息、方法名称等</li><li>服务消费方(consumer)引入facade包，通过RPC方式调用到服务提供方(provider)，并拿到返回结果</li></ol><h2 id="服务注册" tabindex="-1">服务注册 <a class="header-anchor" href="#服务注册" aria-label="Permalink to &quot;服务注册&quot;">​</a></h2><h3 id="服务方注解" tabindex="-1">服务方注解 <a class="header-anchor" href="#服务方注解" aria-label="Permalink to &quot;服务方注解&quot;">​</a></h3><ol><li>我们可以通过<code>Spring AOP</code>的功能，定义一个注解<code>@RpcProvider</code></li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Target</span><span style="color:#ADBAC7;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Retention</span><span style="color:#ADBAC7;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> @</span><span style="color:#F47067;">interface</span><span style="color:#F47067;"> RpcConsumer</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   // 服务类型（被暴露的实现类的接口类型）</span></span>
<span class="line"><span style="color:#ADBAC7;">   Class</span><span style="color:#F47067;">&lt;?&gt;</span><span style="color:#DCBDFB;"> interfaceName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   // 服务版本（默认为空）</span></span>
<span class="line"><span style="color:#ADBAC7;">   String </span><span style="color:#DCBDFB;">version</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">default</span><span style="color:#96D0FF;"> &quot;&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><ol start="2"><li>这样我们就能批量的拿到所有加了这个注解的RPC服务， 并将其注册到<code>Zookeeper</code>中</li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcProviderBeanPostProcessor</span><span style="color:#F47067;"> implements</span><span style="color:#6CB6FF;"> BeanPostProcessor</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Resource</span></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> RpcServiceManager</span><span style="color:#ADBAC7;"> rpcServiceManager;</span></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Resource</span></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> ZookeeperRegistryService</span><span style="color:#ADBAC7;"> zookeeperRegistryService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> Object </span><span style="color:#DCBDFB;">postProcessBeforeInitialization</span><span style="color:#ADBAC7;">(Object </span><span style="color:#F69D50;">bean</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">beanName</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> BeansException {</span></span>
<span class="line"><span style="color:#ADBAC7;">      RpcProvider</span><span style="color:#ADBAC7;"> rpcProvider</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> AnnotationUtils.</span><span style="color:#DCBDFB;">findAnnotation</span><span style="color:#ADBAC7;">(bean.</span><span style="color:#DCBDFB;">getClass</span><span style="color:#ADBAC7;">(), RpcProvider.class);</span></span>
<span class="line"><span style="color:#F47067;">      if</span><span style="color:#ADBAC7;"> (rpcProvider </span><span style="color:#F47067;">!=</span><span style="color:#6CB6FF;"> null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#768390;">         // 获取服务名称</span></span>
<span class="line"><span style="color:#ADBAC7;">         String</span><span style="color:#ADBAC7;"> name</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcProvider.</span><span style="color:#DCBDFB;">interfaceName</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">getName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">         // 获取服务版本</span></span>
<span class="line"><span style="color:#ADBAC7;">         String</span><span style="color:#ADBAC7;"> version</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcProvider.</span><span style="color:#DCBDFB;">version</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">         // 保存服务到map中</span></span>
<span class="line"><span style="color:#ADBAC7;">         rpcServiceManager.</span><span style="color:#DCBDFB;">addService</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">join</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;-&quot;</span><span style="color:#ADBAC7;">, name, version), bean);</span></span>
<span class="line"><span style="color:#768390;">         // 注册服务</span></span>
<span class="line"><span style="color:#ADBAC7;">         zookeeperRegistryService.</span><span style="color:#DCBDFB;">register</span><span style="color:#ADBAC7;">(name </span><span style="color:#F47067;">+</span><span style="color:#96D0FF;"> &quot;-&quot;</span><span style="color:#F47067;"> +</span><span style="color:#ADBAC7;"> version);</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#ADBAC7;"> bean;</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h3 id="服务监听" tabindex="-1">服务监听 <a class="header-anchor" href="#服务监听" aria-label="Permalink to &quot;服务监听&quot;">​</a></h3><p>我们使用<code>Netty</code>来监听RPC服务的请求，因此就要新增一个<code>ChannelHandlerAdapter</code>来处理相应的逻辑，核心代码如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> NettyRpcServerHandler</span><span style="color:#F47067;"> extends</span><span style="color:#6CB6FF;"> SimpleChannelInboundHandler</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">RpcRequest</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   // 存储服务名称及服务对象之间的映射关系</span></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#F47067;"> final</span><span style="color:#ADBAC7;"> Map</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">String</span><span style="color:#F69D50;">, </span><span style="color:#F47067;">Object</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">handlerMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> Object </span><span style="color:#DCBDFB;">handle</span><span style="color:#ADBAC7;">(RpcRequest </span><span style="color:#F69D50;">rpcRequest</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> NoSuchMethodException, InvocationTargetException, IllegalAccessException {</span></span>
<span class="line"><span style="color:#ADBAC7;">      String</span><span style="color:#ADBAC7;"> name</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcRequest.</span><span style="color:#DCBDFB;">getInterfaceName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      String</span><span style="color:#ADBAC7;"> version</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcRequest.</span><span style="color:#DCBDFB;">getVersion</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">      // 获取服务对象</span></span>
<span class="line"><span style="color:#ADBAC7;">      Object</span><span style="color:#ADBAC7;"> serviceBean</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> handlerMap.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">join</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;-&quot;</span><span style="color:#ADBAC7;">, name, version));</span></span>
<span class="line"><span style="color:#F47067;">      if</span><span style="color:#ADBAC7;"> (serviceBean </span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;"> null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#F47067;">         throw</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RuntimeException</span><span style="color:#ADBAC7;">(String.</span><span style="color:#DCBDFB;">format</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;can not find service bean by key: %s&quot;</span><span style="color:#ADBAC7;">, name));</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#768390;">      // 获取反射调用所需的参数</span></span>
<span class="line"><span style="color:#ADBAC7;">      Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">serviceClass</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> serviceBean.</span><span style="color:#DCBDFB;">getClass</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      String</span><span style="color:#ADBAC7;"> methodName</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcRequest.</span><span style="color:#DCBDFB;">getMethodName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">      Object</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">parameters</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcRequest.</span><span style="color:#DCBDFB;">getParameters</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt;[] </span><span style="color:#ADBAC7;">parameterTypes</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcRequest.</span><span style="color:#DCBDFB;">getParameterTypes</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">      // 通过反射调用客户端请求的方法</span></span>
<span class="line"><span style="color:#ADBAC7;">      Method</span><span style="color:#ADBAC7;"> method</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> serviceClass.</span><span style="color:#DCBDFB;">getMethod</span><span style="color:#ADBAC7;">(methodName, parameterTypes);</span></span>
<span class="line"><span style="color:#ADBAC7;">      method.</span><span style="color:#DCBDFB;">setAccessible</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#ADBAC7;"> method.</span><span style="color:#DCBDFB;">invoke</span><span style="color:#ADBAC7;">(serviceBean, parameters);</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h2 id="服务消费" tabindex="-1">服务消费 <a class="header-anchor" href="#服务消费" aria-label="Permalink to &quot;服务消费&quot;">​</a></h2><h3 id="消费者注解" tabindex="-1">消费者注解 <a class="header-anchor" href="#消费者注解" aria-label="Permalink to &quot;消费者注解&quot;">​</a></h3><p>和之前类似，我们依旧通过自定义注解的方式获取到所有的RPC引用</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Target</span><span style="color:#ADBAC7;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Retention</span><span style="color:#ADBAC7;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#ADBAC7;"> @</span><span style="color:#F47067;">interface</span><span style="color:#F47067;"> RpcConsumer</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   // 服务类型（被暴露的实现类的接口类型）</span></span>
<span class="line"><span style="color:#ADBAC7;">   Class</span><span style="color:#F47067;">&lt;?&gt;</span><span style="color:#DCBDFB;"> interfaceName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   // 服务版本（默认为空）</span></span>
<span class="line"><span style="color:#ADBAC7;">   String </span><span style="color:#DCBDFB;">version</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">default</span><span style="color:#96D0FF;"> &quot;&quot;</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h3 id="动态代理" tabindex="-1">动态代理 <a class="header-anchor" href="#动态代理" aria-label="Permalink to &quot;动态代理&quot;">​</a></h3><p>但是这样就有一个问题：因为消费者当前引用的这个RPC服务只是个空接口，并不是一个具体的类， 因此我们需要通过<code>Spring AOP</code>将其替换为代理类，代理类负责将请求参数包装，然后发送给RPC服务方，然后拿到返回结果。</p><p>具体实现方式如下：</p><ol><li>通过<code>BeanPostProcessor</code>拿到bean，遍历其所有字段，如果有<code>@RpcConsumer</code>注解，则将该字段的替换相应的的动态代理类</li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcConsumerBeanPostProcessor</span><span style="color:#F47067;"> implements</span><span style="color:#6CB6FF;"> BeanPostProcessor</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Autowired</span></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> ServiceDiscovery</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">serviceDiscovery;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> Object </span><span style="color:#DCBDFB;">postProcessAfterInitialization</span><span style="color:#ADBAC7;">(Object </span><span style="color:#F69D50;">bean</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">beanName</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">      Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">clazz</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> bean.</span><span style="color:#DCBDFB;">getClass</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">      Field</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">declaredFields</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> clazz.</span><span style="color:#DCBDFB;">getDeclaredFields</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">      for</span><span style="color:#ADBAC7;"> (Field</span><span style="color:#ADBAC7;"> field</span><span style="color:#F47067;"> :</span><span style="color:#ADBAC7;"> declaredFields) {</span></span>
<span class="line"><span style="color:#ADBAC7;">         RpcConsumer</span><span style="color:#ADBAC7;"> annotation</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> field.</span><span style="color:#DCBDFB;">getAnnotation</span><span style="color:#ADBAC7;">(RpcConsumer.class);</span></span>
<span class="line"><span style="color:#F47067;">         if</span><span style="color:#ADBAC7;"> (annotation </span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;"> null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#F47067;">            continue</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">         }</span></span>
<span class="line"><span style="color:#ADBAC7;">         Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">interfaceClass</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> annotation.</span><span style="color:#DCBDFB;">interfaceName</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">         String</span><span style="color:#ADBAC7;"> version</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> annotation.</span><span style="color:#DCBDFB;">version</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">         RpcProxy</span><span style="color:#ADBAC7;"> rpcProxy</span><span style="color:#F47067;"> =</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RpcProxy</span><span style="color:#ADBAC7;">(serviceDiscovery);</span></span>
<span class="line"><span style="color:#ADBAC7;">         Object</span><span style="color:#ADBAC7;"> proxy</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> rpcProxy.</span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">(interfaceClass, version);</span></span>
<span class="line"><span style="color:#ADBAC7;">         field.</span><span style="color:#DCBDFB;">setAccessible</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#F47067;">         try</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            field.</span><span style="color:#DCBDFB;">set</span><span style="color:#ADBAC7;">(bean, proxy);</span></span>
<span class="line"><span style="color:#ADBAC7;">         } </span><span style="color:#F47067;">catch</span><span style="color:#ADBAC7;"> (IllegalAccessException </span><span style="color:#F69D50;">e</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            e.</span><span style="color:#DCBDFB;">printStackTrace</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">         }</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#ADBAC7;"> bean;</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><ol start="2"><li>动态代理实现方式： <ol><li>拿到注解的参数：接口名称、版本号，以便查询<code>Zookeeper</code>获取相应的服务信息</li><li>拿到请求参数，使用<code>Netty</code>进行远程调用</li></ol></li></ol><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcProxy</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> ServiceDiscovery</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">serviceDiscovery;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">   /**</span></span>
<span class="line"><span style="color:#768390;">    * 该构造函数用于提供给用户通过配置文件注入服务发现组件</span></span>
<span class="line"><span style="color:#768390;">    */</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#DCBDFB;"> RpcProxy</span><span style="color:#ADBAC7;">(ServiceDiscovery&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">serviceDiscovery</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#6CB6FF;">      this</span><span style="color:#ADBAC7;">.serviceDiscovery </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> serviceDiscovery;</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> Object </span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">(Class&lt;</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">interfaceClass</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">version</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#768390;">      // 使用 CGLIB 动态代理机制</span></span>
<span class="line"><span style="color:#ADBAC7;">      Enhancer</span><span style="color:#ADBAC7;"> enhancer</span><span style="color:#F47067;"> =</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> Enhancer</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">      enhancer.</span><span style="color:#DCBDFB;">setClassLoader</span><span style="color:#ADBAC7;">(interfaceClass.</span><span style="color:#DCBDFB;">getClassLoader</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">      enhancer.</span><span style="color:#DCBDFB;">setSuperclass</span><span style="color:#ADBAC7;">(interfaceClass);</span></span>
<span class="line"><span style="color:#ADBAC7;">      enhancer.</span><span style="color:#DCBDFB;">setCallback</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">              (MethodInterceptor) (obj, method, args, proxy) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#768390;">                 // 创建 RPC 请求并设置属性</span></span>
<span class="line"><span style="color:#ADBAC7;">                 RpcRequest</span><span style="color:#ADBAC7;"> rpcRequest</span><span style="color:#F47067;"> =</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RpcRequest</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setRequestId</span><span style="color:#ADBAC7;">(UUID.</span><span style="color:#DCBDFB;">randomUUID</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">toString</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setMethodName</span><span style="color:#ADBAC7;">(method.</span><span style="color:#DCBDFB;">getName</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setParameterTypes</span><span style="color:#ADBAC7;">(method.</span><span style="color:#DCBDFB;">getParameterTypes</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setParameters</span><span style="color:#ADBAC7;">(args);</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setInterfaceName</span><span style="color:#ADBAC7;">(interfaceClass.</span><span style="color:#DCBDFB;">getName</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">                 rpcRequest.</span><span style="color:#DCBDFB;">setVersion</span><span style="color:#ADBAC7;">(version);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">                 //查询zookeeper</span></span>
<span class="line"><span style="color:#ADBAC7;">                 ServiceInstance</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">instance</span><span style="color:#F47067;"> =</span><span style="color:#DCBDFB;"> getInstance</span><span style="color:#ADBAC7;">(rpcRequest.</span><span style="color:#DCBDFB;">getInterfaceName</span><span style="color:#ADBAC7;">(), rpcRequest.</span><span style="color:#DCBDFB;">getVersion</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#F47067;">                 if</span><span style="color:#ADBAC7;"> (instance </span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;"> null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#F47067;">                    throw</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RuntimeException</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;server address is empty&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">                 }</span></span>
<span class="line"><span style="color:#768390;">                 // 创建 RPC 客户端对象，建立连接/发送请求/接收请求</span></span>
<span class="line"><span style="color:#ADBAC7;">                 NettyRpcClientHandler</span><span style="color:#ADBAC7;"> handler</span><span style="color:#F47067;"> =</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> NettyRpcClientHandler</span><span style="color:#ADBAC7;">(instance.</span><span style="color:#DCBDFB;">getAddress</span><span style="color:#ADBAC7;">(), instance.</span><span style="color:#DCBDFB;">getPort</span><span style="color:#ADBAC7;">());</span></span>
<span class="line"><span style="color:#ADBAC7;">                 RpcResponse</span><span style="color:#ADBAC7;"> rpcResponse</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> handler.</span><span style="color:#DCBDFB;">send</span><span style="color:#ADBAC7;">(rpcRequest);</span></span>
<span class="line"><span style="color:#F47067;">                 if</span><span style="color:#ADBAC7;"> (rpcResponse </span><span style="color:#F47067;">==</span><span style="color:#6CB6FF;"> null</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#F47067;">                    throw</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RuntimeException</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;response is null&quot;</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">                 }</span></span>
<span class="line"><span style="color:#F47067;">                 return</span><span style="color:#ADBAC7;"> rpcResponse.</span><span style="color:#DCBDFB;">getData</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">              });</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#ADBAC7;"> enhancer.</span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> ServiceInstance&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#DCBDFB;">getInstance</span><span style="color:#ADBAC7;">(String </span><span style="color:#F69D50;">interfaceName</span><span style="color:#ADBAC7;">, String </span><span style="color:#F69D50;">version</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#ADBAC7;">      String</span><span style="color:#ADBAC7;"> name</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> String.</span><span style="color:#DCBDFB;">join</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;-&quot;</span><span style="color:#ADBAC7;">, interfaceName, version);</span></span>
<span class="line"><span style="color:#ADBAC7;">      Collection</span><span style="color:#F69D50;">&lt;</span><span style="color:#ADBAC7;">ServiceInstance</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#F69D50;">&gt;&gt; </span><span style="color:#ADBAC7;">serviceInstances</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> serviceDiscovery.</span><span style="color:#DCBDFB;">queryForInstances</span><span style="color:#ADBAC7;">(name);</span></span>
<span class="line"><span style="color:#ADBAC7;">      Optional</span><span style="color:#F69D50;">&lt;</span><span style="color:#ADBAC7;">ServiceInstance</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">ZookeeperInstance</span><span style="color:#F69D50;">&gt;&gt; </span><span style="color:#ADBAC7;">first</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> serviceInstances.</span><span style="color:#DCBDFB;">stream</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">findFirst</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#ADBAC7;"> first.</span><span style="color:#DCBDFB;">orElse</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">);</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h2 id="编解码" tabindex="-1">编解码 <a class="header-anchor" href="#编解码" aria-label="Permalink to &quot;编解码&quot;">​</a></h2><p>这一块比较简单，就是继承<code>Netty</code>提供的ByteToMessageDecoder、MessageToByteEncoder就可以了，完整代码如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#768390;">// 编码</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcMessageEncoder</span><span style="color:#F47067;"> extends</span><span style="color:#6CB6FF;"> MessageToByteEncoder</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F47067;">Object</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">clazz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#DCBDFB;"> RpcMessageEncoder</span><span style="color:#ADBAC7;">(Class&lt;</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">clazz</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#6CB6FF;">      this</span><span style="color:#ADBAC7;">.clazz </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clazz;</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#F47067;">   protected</span><span style="color:#F47067;"> void</span><span style="color:#DCBDFB;"> encode</span><span style="color:#ADBAC7;">(ChannelHandlerContext </span><span style="color:#F69D50;">ctx</span><span style="color:#ADBAC7;">, Object </span><span style="color:#F69D50;">msg</span><span style="color:#ADBAC7;">, ByteBuf </span><span style="color:#F69D50;">out</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"><span style="color:#F47067;">      byte</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">data</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> ProtostuffSerializer.</span><span style="color:#DCBDFB;">serialize</span><span style="color:#ADBAC7;">(msg, clazz); </span><span style="color:#768390;">// 将对象序列化为字节数组</span></span>
<span class="line"><span style="color:#ADBAC7;">      out.</span><span style="color:#DCBDFB;">writeInt</span><span style="color:#ADBAC7;">(data.length); </span><span style="color:#768390;">// 将消息体长度写入消息头</span></span>
<span class="line"><span style="color:#ADBAC7;">      out.</span><span style="color:#DCBDFB;">writeBytes</span><span style="color:#ADBAC7;">(data); </span><span style="color:#768390;">// 将数据写入消息体</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span style="color:#768390;">// 解码</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcMessageDecoder</span><span style="color:#F47067;"> extends</span><span style="color:#6CB6FF;"> ByteToMessageDecoder</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   private</span><span style="color:#ADBAC7;"> Class</span><span style="color:#F69D50;">&lt;</span><span style="color:#F47067;">?</span><span style="color:#F69D50;">&gt; </span><span style="color:#ADBAC7;">clazz;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#DCBDFB;"> RpcMessageDecoder</span><span style="color:#ADBAC7;">(Class&lt;</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">clazz</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#6CB6FF;">      this</span><span style="color:#ADBAC7;">.clazz </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clazz;</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Override</span></span>
<span class="line"><span style="color:#F47067;">   protected</span><span style="color:#F47067;"> void</span><span style="color:#DCBDFB;"> decode</span><span style="color:#ADBAC7;">(ChannelHandlerContext </span><span style="color:#F69D50;">ctx</span><span style="color:#ADBAC7;">, ByteBuf </span><span style="color:#F69D50;">in</span><span style="color:#ADBAC7;">, List&lt;</span><span style="color:#F47067;">Object</span><span style="color:#ADBAC7;">&gt; </span><span style="color:#F69D50;">out</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">throws</span><span style="color:#ADBAC7;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#768390;">      // 标记当前readIndex的位置，以便后面重置 readIndex 的时候使用</span></span>
<span class="line"><span style="color:#ADBAC7;">      in.</span><span style="color:#DCBDFB;">markReaderIndex</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">      // 读取消息体（消息的长度）. readInt 操作会增加 readerIndex</span></span>
<span class="line"><span style="color:#F47067;">      int</span><span style="color:#ADBAC7;"> length</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> in.</span><span style="color:#DCBDFB;">readInt</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#768390;">      // 如果可读字节数小于消息长度，说明是不完整的消息</span></span>
<span class="line"><span style="color:#F47067;">      if</span><span style="color:#ADBAC7;"> (in.</span><span style="color:#DCBDFB;">readableBytes</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> length) {</span></span>
<span class="line"><span style="color:#ADBAC7;">         in.</span><span style="color:#DCBDFB;">resetReaderIndex</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#F47067;">         return</span><span style="color:#ADBAC7;">;</span></span>
<span class="line"><span style="color:#ADBAC7;">      }</span></span>
<span class="line"><span style="color:#768390;">      // 开始反序列化</span></span>
<span class="line"><span style="color:#F47067;">      byte</span><span style="color:#F69D50;">[] </span><span style="color:#ADBAC7;">body</span><span style="color:#F47067;"> =</span><span style="color:#F47067;"> new</span><span style="color:#F47067;"> byte</span><span style="color:#ADBAC7;">[length];</span></span>
<span class="line"><span style="color:#ADBAC7;">      in.</span><span style="color:#DCBDFB;">readBytes</span><span style="color:#ADBAC7;">(body);</span></span>
<span class="line"><span style="color:#ADBAC7;">      Object</span><span style="color:#ADBAC7;"> obj</span><span style="color:#F47067;"> =</span><span style="color:#ADBAC7;"> ProtostuffSerializer.</span><span style="color:#DCBDFB;">deserialize</span><span style="color:#ADBAC7;">(body, clazz);</span></span>
<span class="line"><span style="color:#ADBAC7;">      out.</span><span style="color:#DCBDFB;">add</span><span style="color:#ADBAC7;">(obj);</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><h2 id="自动装配" tabindex="-1">自动装配 <a class="header-anchor" href="#自动装配" aria-label="Permalink to &quot;自动装配&quot;">​</a></h2><p>至此整体的流程已经全部实现好了，但是我们一般希望把RPC框架作为一个依赖包提供出去的， 因此可以基于Spring的自动装配功能来提供开箱即用的便利性。</p><p>以rpc-provider模块为例，首先定义一个配置类<code>RpcProviderConfiguration</code>用来装配我们需要的bean</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">@</span><span style="color:#F47067;">Configuration</span></span>
<span class="line"><span style="color:#F47067;">public</span><span style="color:#F47067;"> class</span><span style="color:#F69D50;"> RpcProviderConfiguration</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Bean</span></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> NettyServerListener </span><span style="color:#DCBDFB;">nettyServerListener</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> NettyServerListener</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Bean</span></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> RpcProviderBeanPostProcessor </span><span style="color:#DCBDFB;">rpcProviderBeanPostProcessor</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RpcProviderBeanPostProcessor</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Bean</span></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> ZookeeperRegistryService </span><span style="color:#DCBDFB;">zookeeperRegistryService</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> ZookeeperRegistryService</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">Bean</span></span>
<span class="line"><span style="color:#ADBAC7;">   @</span><span style="color:#F47067;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#F47067;">   public</span><span style="color:#ADBAC7;"> RpcServiceManager </span><span style="color:#DCBDFB;">rpcServiceManager</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#F47067;">      return</span><span style="color:#F47067;"> new</span><span style="color:#DCBDFB;"> RpcServiceManager</span><span style="color:#ADBAC7;">();</span></span>
<span class="line"><span style="color:#ADBAC7;">   }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span></code></pre></div><p>然后我们需要在<code>META-INF/spring/</code>目录创建文件<code>org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>（这是Spring Boot 3.0的新规定）， 文件内容填写配置类的包路径即可</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark-dimmed vp-code"><code><span class="line"><span>config.RpcProviderConfiguration</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noreferrer">《手写 RPC 框架》</a></li><li><a href="https://github.com/Veal98/RPC-FromScratch/blob/master/rpc-sample-server/src/main/java/com/cswiki/rpc/sample/server/HelloServiceImpl1.java" target="_blank" rel="noreferrer">从零开始设计一个轻量级分布式 RPC 框架</a></li></ul>`,41),c=[e];function t(r,y,A,i,D,B){return a(),n("div",null,c)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
