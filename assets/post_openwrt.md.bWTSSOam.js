import{_ as s,f as a,e as i,z as l,aj as e,ak as t,al as n,am as p,an as h,ao as r,ap as o,aq as k,ar as d,as as c,at as g,au as F,av as u,aw as y,ax as m,ay as b,az as C,aA as B,aB as E,aC as _,aD as x,aE as q,aF as v,aG as f,aH as A,aI as P,aJ as D,aK as S,aL as w,aM as O,aN as z}from"./chunks/framework.Wsa5D0Hz.js";const $=JSON.parse('{"title":"面向小白的软路由入门指南","description":"","frontmatter":{"title":"面向小白的软路由入门指南","date":"2022-04-30T00:00:00.000Z","excerpt":"OpenWrt是一款开源的路由器操作系统，能够把你们的路由器变成一台强大的网络工具。它的灵活性和可扩展性让用户能够定制路由器的功能，让路由器发挥最大的潜力。","tags":["OpenWrt","软路由","OpenClash","Docker","游戏加速器","samba","aria2"]},"headers":[],"relativePath":"post/openwrt.md","filePath":"post/openwrt.md","lastUpdated":1691420846000}'),W={name:"post/openwrt.md"},N=l('<h1 id="面向小白的软路由入门指南" tabindex="-1">面向小白的软路由入门指南 <a class="header-anchor" href="#面向小白的软路由入门指南" aria-label="Permalink to &quot;面向小白的软路由入门指南&quot;">​</a></h1><blockquote><p>本文演示的软路由型号为友善R4S，其使用ARM v8芯片，相比传统的X86芯片能耗更低，更适合软路由系统</p></blockquote><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>类似于计算机有软件和硬件的概念，在路由器领域，我们习惯把常用的可以发射Wi-Fi信号的设备称为“硬路由”，而把没有无线功能，但是运行着路由系统的设备称为“软路由”</p><ul><li>硬路由的特点：无线信号强，稳定性高但硬件昂贵</li><li>软路由的特点：软件丰富，可玩性高，成本较低</li></ul><p>软路由和硬路由不是相互代替的，反而是相辅相成的关系，有条件的家庭可以两者都选购</p><h2 id="网络拓扑图" tabindex="-1">网络拓扑图 <a class="header-anchor" href="#网络拓扑图" aria-label="Permalink to &quot;网络拓扑图&quot;">​</a></h2><blockquote><p>常见的家庭网络拓扑图，可以看到软路由的位置仅次于光猫，在网络拓扑图中具有较高的地位，正因如此，软路由才可以实现一些硬路由没法实现的高级玩法</p></blockquote><p><img src="'+e+'" style="max-height:400px;" loading="lazy"></p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><blockquote><p>OpenWrt 是一款基于 Linux 的开源软路由系统，专为嵌入式设备（如路由器、网关、无线接入点等）设计。它提供丰富的网络功能和插件，支持多种硬件平台，允许用户自定义配置和扩展功能，从而实现灵活、定制化的路由器管理和网络服务。 OpenWrt 提供了一套完整的路由器操作系统，包括了 Linux 内核、网络管理工具、Web 界面、软件包管理器（opkg）等，用户可以通过 SSH 或 Web 界面进行配置和管理。OpenWrt 具有强大的路由和网络功能，如防火墙、端口转发、虚拟专网（VPN）、负载均衡、QoS（服务质量）、无线网络管理等，同时还支持大量的第三方软件包，如 DNS 服务器、VPN 服务器、网络存储（NAS）等，可以根据需要进行安装和配置。</p></blockquote><p><img src="'+t+'" style="max-height:400px;" loading="lazy"></p><h3 id="下载镜像" tabindex="-1">下载镜像 <a class="header-anchor" href="#下载镜像" aria-label="Permalink to &quot;下载镜像&quot;">​</a></h3><table><thead><tr><th>镜像地址</th><th>特点</th></tr></thead><tbody><tr><td><a href="https://firmware-selector.openwrt.org" target="_blank" rel="noreferrer">OpenWrt官方镜像</a>「推荐」</td><td>优点：最为纯净，稳定性也最好<br>缺点：默认存储空间只有500M，而且不能扩展</td></tr><tr><td><a href="https://wiki.friendlyelec.com/wiki/index.php/NanoPi_R4S#Download_Image_Files" target="_blank" rel="noreferrer">友善官方镜像</a></td><td>优点：较为稳定，自带docker<br>缺点：系统太过臃肿，自定义性差</td></tr><tr><td><a href="https://supes.top/" target="_blank" rel="noreferrer">supes.top</a></td><td>优点：由kiddin9大佬贴心定制，适合小白用户<br>缺点：比起官方的稳定性差</td></tr></tbody></table><p>当然如果你熟悉linux系统的话，也可以自己下载OpenWrt源代码后来编译生成固件，这就不在本篇文章的范围内了</p><h3 id="软件安装" tabindex="-1">软件安装 <a class="header-anchor" href="#软件安装" aria-label="Permalink to &quot;软件安装&quot;">​</a></h3><blockquote><p>以下三种方式任选一种即可</p><p>luci软件安装后在「Service」菜单中可找到</p></blockquote><h4 id="官方仓库" tabindex="-1">官方仓库 <a class="header-anchor" href="#官方仓库" aria-label="Permalink to &quot;官方仓库&quot;">​</a></h4><ol><li><p>登录openwrt后台web界面</p></li><li><p>访问：<strong>System</strong> &gt; <strong>Software</strong> &gt; <strong>Update lists</strong>，更新软件源</p></li><li><p>在上方的红框中输入软件课程，然后在中意的软件右侧点击「Install」</p><p><img src="'+n+'" style="max-height:400px;" loading="lazy"></p></li></ol><h4 id="手动上传安装包" tabindex="-1">手动上传安装包 <a class="header-anchor" href="#手动上传安装包" aria-label="Permalink to &quot;手动上传安装包&quot;">​</a></h4><p>ipk文件仓库列表：</p><table><thead><tr><th>名称</th><th>仓库地址</th></tr></thead><tbody><tr><td>openwrt官方仓库</td><td><a href="https://downloads.openwrt.org/releases/" target="_blank" rel="noreferrer">https://downloads.openwrt.org/releases/</a></td></tr><tr><td>kiddin9大佬的仓库</td><td><a href="https://op.supes.top/packages/" target="_blank" rel="noreferrer">https://op.supes.top/packages/</a></td></tr></tbody></table><ol><li><p>下载好需要的<code>.ipk</code>安装包文件</p></li><li><p>web页面访问：<strong>System</strong> &gt; <strong>Software</strong> &gt; <strong>Upload Package</strong>，上传<code>.ipk</code>安装包</p><p><img src="'+p+`" style="max-height:400px;" loading="lazy"></p></li></ol><h4 id="命令行安装" tabindex="-1">命令行安装 <a class="header-anchor" href="#命令行安装" aria-label="Permalink to &quot;命令行安装&quot;">​</a></h4><ol><li>使用ssh连接到openwrt</li><li>执行如下的命令<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#更新源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#搜索安装包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> search</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {package_name}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {package_name}</span></span></code></pre></div></li></ol><h3 id="扩容分区" tabindex="-1">扩容分区 <a class="header-anchor" href="#扩容分区" aria-label="Permalink to &quot;扩容分区&quot;">​</a></h3><blockquote><p>OpenWrt默认的系统分区只有100M左右，如果你的SD卡空间较大，建议进行扩容</p><p>⚠️以下命令只能在Linux环境下运行</p></blockquote><ol><li><p>执行下面的命令，对镜像包进行分区扩容</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解压下载好的镜像包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gzip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -kdq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openwrt-22.03.4-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重命名文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openwrt-22.03.4-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> op.img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#扩容8000M，这里因为我的SD卡总容量为32G，分出8G绰绰有余</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">op.img</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#进入分区工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> op.img</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#查看分区情况</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#扩容分区2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resizepart</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#再次查看</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#退出分区工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">quit</span></span></code></pre></div></li><li><p>分区之后的数据类似下图</p><p><img src="`+h+'" style="max-height:400px;" loading="lazy"></p></li><li><p>使用u盘工具刷入镜像包，如: <a href="https://rufus.ie/zh/" target="_blank" rel="noreferrer">Rufus</a>, <a href="https://www.balena.io/etcher" target="_blank" rel="noreferrer">Etcher</a></p></li></ol><h3 id="磁盘分区" tabindex="-1">磁盘分区 <a class="header-anchor" href="#磁盘分区" aria-label="Permalink to &quot;磁盘分区&quot;">​</a></h3><ol><li><p>搜索下载<code>luci-app-diskman.ipk</code></p></li><li><p>进入 <strong>System</strong> &gt; <strong>Disk Man</strong> &gt; <strong>Edit</strong>,（如页面报错，则需要安装<code>luci-compat</code>）</p><p><img src="'+r+'" style="max-height:400px;" loading="lazy"></p></li><li><p>填写分区起始、结束位置（一般默认就行），点击「New」，完成分区新建</p><p><img src="'+o+'" style="max-height:400px;" loading="lazy"></p></li><li><p>格式化分区为<strong>ext4</strong>格式</p></li><li><p><strong>System</strong> &gt; <strong>Software</strong>，搜索并下载<code>block-mount</code></p></li><li><p>进入 <strong>System</strong> &gt; <strong>Mount Points</strong>，找到新建的分区，然后<strong>Edit</strong> &gt; <strong>Enable</strong> &gt; <strong>Save&amp;Apply</strong></p><p><img src="'+k+'" style="max-height:400px;" loading="lazy"></p></li></ol><h2 id="推荐软件" tabindex="-1">推荐软件 <a class="header-anchor" href="#推荐软件" aria-label="Permalink to &quot;推荐软件&quot;">​</a></h2><h3 id="argon主题" tabindex="-1">Argon主题 <a class="header-anchor" href="#argon主题" aria-label="Permalink to &quot;Argon主题&quot;">​</a></h3><blockquote><p>OpenWrt下的高颜值主题</p></blockquote><h4 id="安装清单" tabindex="-1">安装清单 <a class="header-anchor" href="#安装清单" aria-label="Permalink to &quot;安装清单&quot;">​</a></h4><ul><li><code>luci-theme-argon</code>：argon主题</li></ul><h4 id="启用" tabindex="-1">启用 <a class="header-anchor" href="#启用" aria-label="Permalink to &quot;启用&quot;">​</a></h4><ol start="2"><li><p><strong>System</strong> &gt; <strong>System</strong> &gt; <strong>Language and Style</strong>，选择Argon主题并保存</p><p><img src="'+d+`" style="max-height:400px;" loading="lazy"></p></li></ol><h3 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h3><h4 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dockerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose</span></span></code></pre></div><h4 id="管理页面" tabindex="-1">管理页面 <a class="header-anchor" href="#管理页面" aria-label="Permalink to &quot;管理页面&quot;">​</a></h4><p><strong>需要打开防火墙转发，Luci &gt; 网络 &gt; 防火墙 &gt; 转发：接受</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#创建一个卷，来供管理工具存储数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer_data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#拉取Docker镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer/portainer-ce:linux-arm64</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#运行Docker容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8000</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9443</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:9443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer_data:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> portainer/portainer-ce:linux-arm64</span></span></code></pre></div><p>访问地址：<code>https://192.168.1.1:9443</code></p><p>创建用户名和密码</p><h4 id="运行容器" tabindex="-1">运行容器 <a class="header-anchor" href="#运行容器" aria-label="Permalink to &quot;运行容器&quot;">​</a></h4><h5 id="debian" tabindex="-1">Debian <a class="header-anchor" href="#debian" aria-label="Permalink to &quot;Debian&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debian</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><h5 id="mariadb" tabindex="-1">MariaDB <a class="header-anchor" href="#mariadb" aria-label="Permalink to &quot;MariaDB&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /my/own/datadir:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MARIADB_ROOT_PASSWORD=my-secret-pw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mariadb:latest</span></span></code></pre></div><h5 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h5><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /myredis/conf:/usr/local/etc/redis</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myredis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/etc/redis/redis.conf</span></span></code></pre></div><h3 id="samba" tabindex="-1">Samba <a class="header-anchor" href="#samba" aria-label="Permalink to &quot;Samba&quot;">​</a></h3><blockquote><p>Samba 是一组不同功能程序组成的应用集合，它能让 Linux 服务器实现文件服务器、身份授权和认证、名称解析和打印服务等功能。</p><p>Samba分为服务端和客户端，本次我们打算将软路由上作为文件共享中心，因此需要在软路由上安装Samba的服务端。客户端的话，因为现代的操作系统默认都支持SMB协议，所以只需要稍加配置即可启用</p></blockquote><h4 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h4><ul><li><code>samba4-server</code>：samba的服务端</li><li><code>luci-app-samba4</code>：可视化配置页面</li></ul><p><img src="`+c+`" style="max-height:400px;" loading="lazy"></p><h4 id="添加用户" tabindex="-1">添加用户 <a class="header-anchor" href="#添加用户" aria-label="Permalink to &quot;添加用户&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装&#39;useradd&#39;，目的是为了创建用户</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shadow-useradd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#新建一个用户,名字叫&#39;samba&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useradd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> samba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#为用户samba创建密码，看到&#39;Added user samba.&#39;表示用户成功添加到samba中了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">smbpasswd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> samba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#创建一个文件夹用于samba共享，可以自己随意设置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/samba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#使用户samba获得文件夹权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> samba:samba</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/samba</span></span></code></pre></div><h4 id="软件配置" tabindex="-1">软件配置 <a class="header-anchor" href="#软件配置" aria-label="Permalink to &quot;软件配置&quot;">​</a></h4><ol><li><p>进入Samba配置页面： <strong>Services</strong> &gt; <strong>Network Shares</strong></p></li><li><p>共享目录，注意 <code>Path</code> 一定要选之前创建的，例如我的就是 <code>/opt/samba</code>，其他的可以参照我的截图来</p><p><img src="`+g+'" style="max-height:400px;" loading="lazy"></p></li><li><p>兼容苹果设备访问(建议打开)</p><p><img src="'+F+'" style="max-height:400px;" loading="lazy"></p></li></ol><h4 id="其他平台访问方式" tabindex="-1">其他平台访问方式 <a class="header-anchor" href="#其他平台访问方式" aria-label="Permalink to &quot;其他平台访问方式&quot;">​</a></h4><h5 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h5><ol><li><p>在启用或关闭windows功能中打开 <code>SMB 1.0/CIFS 文件共享支持</code> 和 <code>SMB直通</code></p><p><img src="'+u+'" style="max-height:400px;" loading="lazy"></p></li><li><p>打开文件资源管理器，右键「此电脑」-&gt; 「映射网络驱动器」</p><p><img src="'+y+'" style="max-height:400px;" loading="lazy"></p></li><li><p>文件夹填入<code>\\\\192.168.1.1\\samba</code>，然后回车</p></li><li><p>按照提示输入用户名和密码即可成功连接</p><p><img src="'+m+'" style="max-height:400px;" loading="lazy"></p></li></ol><h5 id="mac" tabindex="-1">Mac <a class="header-anchor" href="#mac" aria-label="Permalink to &quot;Mac&quot;">​</a></h5><ol><li><p>打开Finder</p></li><li><p>按下快捷键 <code>⌘ + k</code> 打开连接</p></li><li><p>输入samba的服务器地址，例如 <code>smb://192.168.1.1</code>，点击连接</p></li><li><p>按照提示输入用户名和密码即可成功连接</p><p><img src="'+b+'" style="max-height:400px;" loading="lazy"></p></li></ol><h5 id="iphone-ipad" tabindex="-1">iPhone/iPad <a class="header-anchor" href="#iphone-ipad" aria-label="Permalink to &quot;iPhone/iPad&quot;">​</a></h5><ol><li><p>打开文件 -&gt; 浏览，然后点击右上角 更多 -&gt; 连接服务器</p><p><img src="'+C+'" style="max-height:400px;" loading="lazy"></p></li><li><p>输入samba的服务器地址，例如 <code>smb://192.168.1.1</code>，点击连接</p></li><li><p>按照提示输入用户名和密码即可成功连接</p><p><img src="'+B+'" style="max-height:400px;" loading="lazy"></p></li></ol><h3 id="aria2" tabindex="-1">Aria2 <a class="header-anchor" href="#aria2" aria-label="Permalink to &quot;Aria2&quot;">​</a></h3><blockquote><p>Linux 平台下知名的下载工具</p></blockquote><h4 id="安装清单-1" tabindex="-1">安装清单 <a class="header-anchor" href="#安装清单-1" aria-label="Permalink to &quot;安装清单&quot;">​</a></h4><ul><li><code>aria2</code>：aria2内核</li><li><code>luci-app-aria2</code>：luci界面</li><li><code>webui-aria2</code>：web界面</li></ul><h4 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h4><ol><li><p>在 <strong>Basic Options</strong> 中开启Aria服务，并设置下载目录，这里我是下载到samba路径下方便分享</p><p><img src="'+E+'" style="max-height:400px;" loading="lazy"></p></li><li><p>在 RPC Options 生成RPC令牌</p><p><img src="'+_+'" style="max-height:400px;" loading="lazy"></p></li><li><p>返回 Basic Options ，点击上方的“WEBUI-ARIA2”按钮</p><ol><li><p>设置 &gt; 连接设置中填写aria2服务的ip、端口、rpc密钥</p><p><img src="'+x+'" style="max-height:400px;" loading="lazy"></p></li><li><p>保存连接配置</p></li><li><p>现在可以试试下载一个url文件或者BT种子</p></li></ol></li></ol><h3 id="网络唤醒" tabindex="-1">网络唤醒 <a class="header-anchor" href="#网络唤醒" aria-label="Permalink to &quot;网络唤醒&quot;">​</a></h3><blockquote><p>教你如何使用Siri唤醒你的PC电脑</p></blockquote><h4 id="安装清单-2" tabindex="-1">安装清单 <a class="header-anchor" href="#安装清单-2" aria-label="Permalink to &quot;安装清单&quot;">​</a></h4><ul><li><code>luci-app-wol</code> (会自动安装<code>etherwake</code>等依赖)</li></ul><h4 id="pc设置" tabindex="-1">PC设置 <a class="header-anchor" href="#pc设置" aria-label="Permalink to &quot;PC设置&quot;">​</a></h4><ol><li><p>在 Windows 10 中，运行 &gt; ncpa.cpl 打开「网络连接」设置，然后找到当前在使用的有线网卡，右键点击「属性」：</p><p><img src="'+q+'" style="max-height:400px;" loading="lazy"></p></li><li><p>然后选择「配置」：</p><p><img src="'+v+'" style="max-height:400px;" loading="lazy"></p></li><li><p>在随后弹出的面板中找到「电源管理」，勾选「允许此设备唤醒计算机」以及「只允许幻数据包唤醒计算机」</p><p><img src="'+f+'" style="max-height:400px;" loading="lazy"></p></li></ol><h4 id="主板设置" tabindex="-1">主板设置 <a class="header-anchor" href="#主板设置" aria-label="Permalink to &quot;主板设置&quot;">​</a></h4><p>除此之外，我们可能还需要启用适当的 BIOS 设置才能使用 WoL 功能，具体方法视厂商而定，进入 BIOS 后注意选项附加的说明即可，可以参考的关键词包括：</p><ul><li>Network Stack</li><li>Automatic Power On</li><li>Wake on LAN/WLAN</li><li>Power Management</li><li>Power On by Onboard LAN</li><li>Power On by PCI-E Devices</li></ul><h4 id="测试唤醒" tabindex="-1">测试唤醒 <a class="header-anchor" href="#测试唤醒" aria-label="Permalink to &quot;测试唤醒&quot;">​</a></h4><ol><li><p><strong>Service</strong> &gt; <strong>Wake On LAN</strong></p></li><li><p>选择网口和待唤醒的主机IP，点击「WAKE UP HOST」</p></li></ol><h4 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h4><ol><li><p><strong>捷径</strong> &gt; <strong>新建快捷指令</strong> &gt; <strong>添加操作</strong>，选择「通过SSH运行脚本」</p></li><li><p>填写脚本代码: <code>etherwake -D ${需要唤醒的MAC地址}</code></p></li><li><p>填写ssh连接信息</p><p><img src="'+A+`" style="max-height:400px;" loading="lazy"></p></li><li><p>之后需要唤醒电脑时：「嘿Siri，唤醒电脑」</p></li></ol><h3 id="openclash" tabindex="-1"><a href="https://github.com/vernesong/OpenClash" target="_blank" rel="noreferrer">OpenClash</a> <a class="header-anchor" href="#openclash" aria-label="Permalink to &quot;[OpenClash](https://github.com/vernesong/OpenClash)&quot;">​</a></h3><blockquote><p>一个可运行在 OpenWrt 上的 Clash 客户端，兼容 Shadowsocks、ShadowsocksR、Vmess、Trojan、Snell 等协议</p></blockquote><h4 id="安装-2" tabindex="-1">安装 <a class="header-anchor" href="#安装-2" aria-label="Permalink to &quot;安装&quot;">​</a></h4><ol><li><p>登录路由器后台，比如 <code>ssh root@192.168.1.1</code></p></li><li><p>下载安装前依赖：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #如果是新的nftables</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coreutils-nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnsmasq-full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-certificates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip-full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcap-bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby-yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kmod-tun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kmod-inet-diag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kmod-nft-tproxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci-compat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci-base</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #如果是旧的iptables</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> opkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coreutils-nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iptables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnsmasq-full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ca-certificates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip-full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iptables-mod-tproxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> iptables-mod-extra</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcap-bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby-yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kmod-tun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kmod-inet-diag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci-compat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> luci-base</span></span></code></pre></div></li><li><p>在<a href="https://github.com/vernesong/OpenClash/releases" target="_blank" rel="noreferrer">OpenClash Release页面</a>找到最新版本的ipk安装包，复制连接地址 下载安装包: <code>wget https://github.com/vernesong/OpenClash/releases/download/v0.45.110-beta/luci-app-openclash_0.45.110-beta_all.ipk -O luci-app-openclash.ipk</code></p></li><li><p>安装OpenClash: <code>opkg install ./luci-app-openclash.ipk</code></p></li><li><p>在 <strong>Services</strong> &gt; <strong>OpenClash</strong> 中即可找到</p></li></ol><h4 id="配置-1" tabindex="-1">配置 <a class="header-anchor" href="#配置-1" aria-label="Permalink to &quot;配置&quot;">​</a></h4><ol><li><p>下载clash内核</p><ol><li><p><strong>OpenClash</strong> &gt; <strong>Plugin Setting</strong> &gt; <strong>Version Update</strong></p></li><li><p>找到如图位置，点击即可下载最新版clash内核</p><p><img src="`+P+'" style="max-height:400px;" loading="lazy"></p></li></ol></li><li><p>添加clash订阅</p><ol><li><p><strong>OpenClash</strong> &gt; <strong>Config Subscribe</strong> &gt; <strong>ADD</strong></p><p><img src="'+D+'" style="max-height:400px;" loading="lazy"></p></li><li><p>在<code>Subscribe Address</code>中填写自己的clash订阅地址并点击<code>COMMIT SETTING</code>保存</p></li></ol></li><li><p>点击OpenClash首页左下角“ENABLE OPENCLASH”即可启动</p></li><li><p>点击中间的“OPEN PANEL”可以访问clash前端UI面板</p><p><img src="'+S+`" style="max-height:400px;" loading="lazy"></p></li></ol><h3 id="cloudreve" tabindex="-1"><a href="https://docs.cloudreve.org/" target="_blank" rel="noreferrer">Cloudreve</a> <a class="header-anchor" href="#cloudreve" aria-label="Permalink to &quot;[Cloudreve](https://docs.cloudreve.org/)&quot;">​</a></h3><blockquote><p>开源的私有云系统，提供类似谷歌云一样的易用界面，支持文件下载、上传、分享等，同时也支持aria2离线下载</p></blockquote><h4 id="安装-3" tabindex="-1">安装 <a class="header-anchor" href="#安装-3" aria-label="Permalink to &quot;安装&quot;">​</a></h4><ol><li>使用terminal登录openwrt后台，比如 <code>ssh root@192.168.1.1</code></li><li>在GitHub的<a href="https://github.com/cloudreve/Cloudreve/releases" target="_blank" rel="noreferrer">release</a>页面找到最新的安装包，使用如下命令进行下载并保存<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/cloudreve/Cloudreve/releases/download/3.7.1/cloudreve_3.7.1_linux_arm64.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cloudreve_3.7.1_linux_arm64.tar.gz</span></span></code></pre></div></li><li>解压到<code>/opt/cloudreve</code>目录下: <code>tar -zxvf cloudreve_3.7.1_linux_arm64.tar.gz -C /opt/cloudreve</code></li><li>赋予执行权限: <code>chmod +x ./cloudreve</code></li><li>启动cloudreve: <code>./cloudreve</code>，命令行日志中可看到初始的管理员密码，<strong>请务必保存！！！</strong></li></ol><h5 id="开机自启动" tabindex="-1">开机自启动 <a class="header-anchor" href="#开机自启动" aria-label="Permalink to &quot;开机自启动&quot;">​</a></h5><ol><li>新增cloudreve启动文件: <code>vim /etc/init.d/cloudreve</code></li><li>填写如下的内容:<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh /etc/rc.common</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">START</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">STOP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">01</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">USE_PROCD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用名称 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cloudreve</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应用路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PROG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/opt/cloudreve/cloudreve</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start_service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  procd_open_instance</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PROG</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 输出日志到系统log中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stdout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  procd_set_param</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stderr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  procd_close_instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>启用服务: <code>/etc/init.d/cloudreve enable</code></li></ol><h4 id="配置离线下载" tabindex="-1">配置离线下载 <a class="header-anchor" href="#配置离线下载" aria-label="Permalink to &quot;配置离线下载&quot;">​</a></h4><ol><li><p>浏览器访问<code>192.168.1.1:5212</code>，使用admin账号登录</p><p><img src="`+w+'" style="max-height:400px;" loading="lazy"></p></li><li><p>登录后点右上角<strong>头像</strong> &gt; <strong>管理面板</strong> &gt; <strong>离线下载节点</strong>，修改主节点</p></li><li><p>在离线下载部分填写Aria2对应的信息，保存后即可使用离线下载功能</p><p><img src="'+O+'" style="max-height:400px;" loading="lazy"></p></li></ol><h3 id="网易uu加速器" tabindex="-1">网易UU加速器 <a class="header-anchor" href="#网易uu加速器" aria-label="Permalink to &quot;网易UU加速器&quot;">​</a></h3><h4 id="安装清单-3" tabindex="-1">安装清单 <a class="header-anchor" href="#安装清单-3" aria-label="Permalink to &quot;安装清单&quot;">​</a></h4><ul><li><code>uugamebooster</code>：网易uu加速器</li><li><code>luci-app-uugamebooster</code>：对应的luci界面</li></ul><h4 id="启用-1" tabindex="-1">启用 <a class="header-anchor" href="#启用-1" aria-label="Permalink to &quot;启用&quot;">​</a></h4><ol><li><p>勾选「enable」，保存并应用</p><p><img src="'+z+'" style="max-height:400px;" loading="lazy"></p></li><li><p>然后使用手机APP即可进行加速</p></li></ol><p>其他加速器如：灵缇加速器、迅游加速器等等，步骤都是类似的</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://opclash.com/luyou/16.html" target="_blank" rel="noreferrer">彧繎博客</a></li><li><a href="https://github.com/vernesong/OpenClash/wiki" target="_blank" rel="noreferrer">OpenClash-使用手册</a></li><li><a href="https://sspai.com/post/67037" target="_blank" rel="noreferrer">嘿 Siri，唤醒电脑</a></li></ul>',109),M=[N];function R(T,I,L,U,G,V){return i(),a("div",null,M)}const j=s(W,[["render",R]]);export{$ as __pageData,j as default};
