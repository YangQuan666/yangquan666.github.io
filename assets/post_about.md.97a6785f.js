import{_ as a,f as e,e as t,s as r}from"./chunks/framework.148ca673.js";const q=JSON.parse('{"title":"关于这个博客","description":"","frontmatter":{"title":"关于这个博客","date":"2020-05-01T00:00:00.000Z","excerpt":"我为什么想自己做一个博客，以及我是怎么搭建起来这个博客网站的","tags":["blog","vitepress","github action","quasar","markdown"]},"headers":[],"relativePath":"post/about.md","filePath":"post/about.md","lastUpdated":1684303541000}'),o={name:"post/about.md"},i=r('<h1 id="关于这个博客" tabindex="-1">关于这个博客 <a class="header-anchor" href="#关于这个博客" aria-label="Permalink to &quot;关于这个博客&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>众所周知，哪个程序员不希望有一个自己的博客网站呢，其实我刚毕业就一直想做一个个人博客网站， 但是自己的拖延症太验证了👀，最终在2023年花了点时间，做了一个还能凑合用的博客网站</p><h2 id="博客的亮点" tabindex="-1">博客的亮点 <a class="header-anchor" href="#博客的亮点" aria-label="Permalink to &quot;博客的亮点&quot;">​</a></h2><h3 id="响应式" tabindex="-1">响应式 <a class="header-anchor" href="#响应式" aria-label="Permalink to &quot;响应式&quot;">​</a></h3><p>基于quasar UI的特点，我做了一个响应式的前端页面，目前已经在PC、Mac、iPhone、iPad上测试过，显示效果良好</p><h3 id="为dark模式优化" tabindex="-1">为Dark模式优化 <a class="header-anchor" href="#为dark模式优化" aria-label="Permalink to &quot;为Dark模式优化&quot;">​</a></h3><p>都3022年了，不会还有网站不支持dark模式吧，为了使用方便我没有单独提供一个切换夜间模式的开关，它是基于你系统主题来的， 也就是说如果你系统是亮色，则这个博客就是亮色，如果你系统是夜间模式，那它就自动切换到夜间模式😎</p><h3 id="支持全局搜索" tabindex="-1">支持全局搜索 <a class="header-anchor" href="#支持全局搜索" aria-label="Permalink to &quot;支持全局搜索&quot;">​</a></h3><h3 id="seo优化" tabindex="-1">SEO优化 <a class="header-anchor" href="#seo优化" aria-label="Permalink to &quot;SEO优化&quot;">​</a></h3><p>google console地址</p><h2 id="用到了哪些技术" tabindex="-1">用到了哪些技术 <a class="header-anchor" href="#用到了哪些技术" aria-label="Permalink to &quot;用到了哪些技术&quot;">​</a></h2><blockquote><p>站在巨人的肩膀，可以看得更远 --沃兹基·硕得</p></blockquote><h3 id="github-pages" tabindex="-1">GitHub Pages <a class="header-anchor" href="#github-pages" aria-label="Permalink to &quot;GitHub Pages&quot;">​</a></h3><p>搭建博客一直有个比不开的问题就是：博客部署到哪？ 自己买服务器，一年的费用也是比不小的开支，好在GitHub帮我们免费提供了一个静态博客的方案：「GitHub Pages」</p><h3 id="vitepress" tabindex="-1">VitePress <a class="header-anchor" href="#vitepress" aria-label="Permalink to &quot;VitePress&quot;">​</a></h3><h3 id="quasar" tabindex="-1">Quasar <a class="header-anchor" href="#quasar" aria-label="Permalink to &quot;Quasar&quot;">​</a></h3><h3 id="algolia" tabindex="-1">Algolia <a class="header-anchor" href="#algolia" aria-label="Permalink to &quot;Algolia&quot;">​</a></h3><h3 id="markdown-css" tabindex="-1">Markdown CSS <a class="header-anchor" href="#markdown-css" aria-label="Permalink to &quot;Markdown CSS&quot;">​</a></h3><h3 id="netlify" tabindex="-1">Netlify <a class="header-anchor" href="#netlify" aria-label="Permalink to &quot;Netlify&quot;">​</a></h3><h3 id="sitemap" tabindex="-1">Sitemap <a class="header-anchor" href="#sitemap" aria-label="Permalink to &quot;Sitemap&quot;">​</a></h3>',21),l=[i];function s(h,n,d,c,u,b){return t(),e("div",null,l)}const m=a(o,[["render",s]]);export{q as __pageData,m as default};
